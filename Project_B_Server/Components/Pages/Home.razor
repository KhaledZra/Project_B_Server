@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Project_B_Server_Domain
@using Project_B_Server.Services
@inject NavigationManager Navigation
@inject MessageService MessageService
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(ButtonStatus())">
    Send
</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages.AsEnumerable().Reverse())
    {
        <li>[@message.DateStamp] @message.User: @message.Text</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"{DateTime.Now} - Connecting to: {Navigation.ToAbsoluteUri("/chathub")}");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();
        
        // Sync with the database
        messages = await MessageService.GetMessages();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            // TODO the time will not be 1=1 since this is set locally vs the one saved in the database
            messages.Add(new Message { User = user, Text = message, DateStamp = DateTime.Now });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            await MessageService.AddMessageAsync(userInput, messageInput, DateTime.Now);
            messageInput = null;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private bool ButtonStatus() =>
        string.IsNullOrWhiteSpace(messageInput) ||
        string.IsNullOrWhiteSpace(userInput) ||
        !IsConnected;
}
